{
	"create entity store model": {
		"prefix": "model-store",
		"description": "create mobx entity store model",
		"scope": "javascript,typescript",
		"body": [
			"import { types, flow, getEnv, Instance, SnapshotIn, SnapshotOut } from \"mobx-state-tree\";",
			"import _ from \"lodash\";",
			"import { AxiosResponse } from \"axios\";",
			"",
			"import { $1 } from \"~/mobx/entities/${1/(.*)/${1:/downcase}/}/$1\";",
			"import { Environment } from \"~/mobx/createStore\";",
			"",
			"export interface $1StoreInstance extends Instance<typeof $1Store> {}",
			"export interface $1StoreSnapshotIn extends SnapshotIn<typeof $1Store> {}",
			"export interface $1StoreSnapshotOut extends SnapshotOut<typeof $1Store> {}",
			"",
			"export const $1Store = types",
			"  .model(\"$1Store\", {",
			"    map: types.map($1)",
			"  })",
			"  .actions(self => {",
			"    return {",
			"      process$1List(data) {",
			"        for (const entity of _.castArray(data)) {",
			"          self.map.put(entity);",
			"        }",
			"      }",
			"    };",
			"  })",
			"  .actions(self => {",
			"    return {",
			"      create$1: flow(function*(params): any {",
			"        const env: Environment = getEnv(self);",
			"        const response: AxiosResponse = yield env.http.post(`/${1/(.*)/${1:/downcase}/}s`, params);",
			"        self.process$1List(response.data);",
			"        return response;",
			"      }),",
			"",
			"      read$1List: flow(function*(params): any {",
			"        const env: Environment = getEnv(self);",
			"        const response: AxiosResponse = yield env.http.get(`/${1/(.*)/${1:/downcase}/}s`, {",
			"          params",
			"        });",
			"        self.process$1List(response.data);",
			"        return response;",
			"      }),",
			"",
			"      read$1: flow(function*(id, params): any {",
			"        const env: Environment = getEnv(self);",
			"        const response: AxiosResponse = yield env.http.get(`/${1/(.*)/${1:/downcase}/}s/\\${id}`, {",
			"          params",
			"        });",
			"        self.process$1List(response.data);",
			"        return response;",
			"      }),",
			"",
			"      update$1: flow(function*(id, params): any {",
			"        const env: Environment = getEnv(self);",
			"        const response: AxiosResponse = yield env.http.post(",
			"          `/${1/(.*)/${1:/downcase}/}s/\\${id}`,",
			"          params",
			"        );",
			"        self.process$1List(response.data);",
			"        return response;",
			"      }),",
			"",
			"      delete$1: flow(function*(id, params): any {",
			"        const env: Environment = getEnv(self);",
			"        const response: AxiosResponse = yield env.http.post(",
			"          `/${1/(.*)/${1:/downcase}/}s/\\${id}`,",
			"          params",
			"        );",
			"        self.process$1List(response.data);",
			"        return response;",
			"      })",
			"    };",
			"  });",
			"",
		]
	},
	"create single entity model": {
		"prefix": "model-single",
		"description": "create single mobx entitiy model",
		"scope": "javascript,typescript",
		"body": [
			"import {",
			"  flow,",
			"  types,",
			"  Instance,",
			"  SnapshotIn,",
			"  SnapshotOut",
			"} from 'mobx-state-tree';",
			"import { DateTime } from '~/mobx/util-models/DateTime';",
			"import { getRoot } from '~/mobx/utils/getRoot';",
			"",
			"export interface $1Instance extends Instance<typeof $1> {}",
			"export interface $1SnapshotIn extends SnapshotIn<typeof $1> {}",
			"export interface $1SnapshotOut extends SnapshotOut<typeof $1> {}",
			"",
			"export const $1 = types",
			"  .model('$1', {",
			"    id: types.identifierNumber,",
			"    created_at: DateTime,",
			"    updated_at: DateTime,",
			"    name: types.string",
			"  })",
			"  .actions(self => {",
			"    return {",
			"      refresh: flow(function* (params): any {",
			"        const root = getRoot(self);",
			"        return yield root.${1/(.*)/${1:/downcase}/}Store.read$1(self.id, params);",
			"      }),",
			"",
			"      update: flow(function* (params): any {",
			"        const root = getRoot(self);",
			"        return yield root.${1/(.*)/${1:/downcase}/}Store.update$1(self.id, params);",
			"      }),",
			"",
			"      delete: flow(function* (params): any {",
			"        const root = getRoot(self);",
			"        return yield root.${1/(.*)/${1:/downcase}/}Store.delete$1(self.id, params);",
			"      })",
			"    };",
			"  });",
			""
		]
	}
	// Place your ShoppingApp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
}